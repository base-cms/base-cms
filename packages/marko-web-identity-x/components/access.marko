import { getAsArray } from '@base-cms/object-path';

$ const { req, onAsyncBlockError } = out.global;
$ const isDevelopment = process.env.NODE_ENV === 'development';
$ const { identityX } = req;

$ const requiredAccessLevelIds = getAsArray(input.requiredAccessLevelIds);
$ const params = { isEnabled: input.enabled, requiredAccessLevelIds };

$ const checkContentAccess = async () => (Boolean(req.identityX) ? identityX.checkContentAccess(params) : {
  canAccess: true,
  isLoggedIn: false,
  hasRequiredAccessLevel: false,
  requiresAccessLevel: false,
  requiredAccessLevels: [],
  messages: {},
});

<await(checkContentAccess())>
  <@then|access|>
    <${input.renderBody} ...access />
  </@then>
  <@catch|err|>
    $ if (typeof onAsyncBlockError === 'function') onAsyncBlockError(err);
    <if(input.onError)>
      <${input.onError} err=err />
    </if>
    <else>
      <pre>An unexpected error occurred: ${err.message}</pre>
      <if(isDevelopment)>
        <pre>${err.stack}</pre>
      </if>
    </else>
  </@catch>
</await>
